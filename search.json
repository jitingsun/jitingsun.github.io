[{"title":"react学习之基础知识","url":"https://jitingsun.github.io/2016/11/06/react学习之基础知识/","content":"<h2 id=\"1-什么是react\"><a href=\"#1-什么是react\" class=\"headerlink\" title=\"1. 什么是react\"></a>1. 什么是react</h2><p>React 是一个用于构建用户界面的JavaScript库</p>\n<h2 id=\"2-安装react\"><a href=\"#2-安装react\" class=\"headerlink\" title=\"2. 安装react\"></a>2. 安装react</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ bower install react babel --save</div></pre></td></tr></table></figure>\n<h2 id=\"3-直接在浏览器中使用React\"><a href=\"#3-直接在浏览器中使用React\" class=\"headerlink\" title=\"3. 直接在浏览器中使用React\"></a>3. 直接在浏览器中使用React</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=<span class=\"string\">\"../bower_components/react/react.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script src=<span class=\"string\">\"../bower_components/react/react-dom.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script src=<span class=\"string\">\"../bower_components/babel/browser.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">\"text/babel\"</span> src=<span class=\"string\">\"index.js\"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>react.js 是 React 的<em>核心</em>库</li>\n<li>react-dom.js 是提供与<em>DOM</em>相关的功能,会在window下增加<code>ReactDOM</code>属性</li>\n<li>browser.js 的作用是将<code>JSX</code>语法转为<code>JavaScript</code>语法</li>\n</ul>\n<blockquote>\n<p><code>script</code>中的<code>type</code>属性为<code>text/babel</code>,因为React独有的JSX语法,跟JavaScript不兼容</p>\n</blockquote>\n<h2 id=\"4-ReactDOM-render\"><a href=\"#4-ReactDOM-render\" class=\"headerlink\" title=\"4. ReactDOM.render\"></a>4. ReactDOM.render</h2><p><code>ReactDOM.render</code> 是 <code>React</code> 的最基本方法,用于将标签模板转为HTML语言，并插入指定的DOM节点</p>\n<h3 id=\"4-1-index-html\"><a href=\"#4-1-index-html\" class=\"headerlink\" title=\"4.1. index.html\"></a>4.1. index.html</h3><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"addition\">+   &lt;div id=\"app\"&gt;&lt;/div&gt;</span></div><div class=\"line\"><span class=\"addition\">+   &lt;script type=\"text/babel\" src=\"js/1.react.js\"/&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"4-2-js-1-react-js\"><a href=\"#4-2-js-1-react-js\" class=\"headerlink\" title=\"4.2. js/1.react.js\"></a>4.2. js/1.react.js</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ReactDOM.render(</div><div class=\"line\">&lt;h1&gt;demo&lt;/h1&gt;,</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app'</span>)</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>上面代码将一个h1标题，插入app元素内部</p>\n</blockquote>\n<h2 id=\"5-JSX-语法\"><a href=\"#5-JSX-语法\" class=\"headerlink\" title=\"5. JSX 语法\"></a>5. JSX 语法</h2><p>是一种JS和HTML混合的语法,将组件的<em>结构</em>、<em>数据</em>甚至<em>样式</em>都聚合在一起定义组件,会编译成普通的Javascript。</p>\n<ul>\n<li>遇到HTML标签(以 &lt; 开头)，就用<em>HTML</em>规则解析</li>\n<li>遇到代码块(以 { 开头)，就用<em>JavaScript</em>规则解析</li>\n<li>使用样式时可以让style等于一个样式对象</li>\n<li>使用样式类时只能使用<code>className=类名</code>,因为class是Javascript关键字</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> persons = [<span class=\"string\">'刘德华'</span>, <span class=\"string\">'范冰冰'</span>, <span class=\"string\">'郭跃'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> style = &#123;<span class=\"attr\">color</span>:<span class=\"string\">'red'</span>&#125;;</div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  &lt;div&gt;</div><div class=\"line\">  &#123;</div><div class=\"line\">    persons.map(function (person) &#123;</div><div class=\"line\">      return &lt;div style=&#123;style&#125;&gt;Hello, &#123;person&#125;!&lt;/div&gt;</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">  &lt;/div&gt;,</div><div class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app'</span>)</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h2 id=\"6-定义组件\"><a href=\"#6-定义组件\" class=\"headerlink\" title=\"6. 定义组件\"></a>6. 定义组件</h2><p>我们可以很直观的将一个复杂的页面分割成若干个独立组件,每个组件包含自己的逻辑和样式<br>再将这些独立组件组合完成一个复杂的页面。<br>这样既减少了逻辑复杂度，又实现了代码的重用</p>\n<ul>\n<li>可组合：一个组件可以和其他的组件一起使用或者可以直接嵌套在另一个组件内部</li>\n<li>可重用：每个组件都是具有独立功能的，它可以被使用在多个场景中</li>\n<li>可维护：每个小的组件仅仅包含自身的逻辑，更容易被理解和维护</li>\n</ul>\n<h3 id=\"6-1-定义组件\"><a href=\"#6-1-定义组件\" class=\"headerlink\" title=\"6.1 定义组件\"></a>6.1 定义组件</h3><p>React允许将代码封装成组件，然后像插入普通HTML标签一样，在网页中插入这个组件</p>\n<ul>\n<li>组件类的第一个字母必须<em>大写</em></li>\n<li>组件类<em>能且只能</em>包含一个<em>顶层标签</em></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Message = React.createClass(&#123;</div><div class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &lt;h1&gt;Hello&lt;/h1&gt;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">    &lt;Message/&gt;,</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app'</span>)</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h3 id=\"6-2-组件的属性\"><a href=\"#6-2-组件的属性\" class=\"headerlink\" title=\"6.2 组件的属性\"></a>6.2 组件的属性</h3><ul>\n<li>每个组件可以有自己的属性,一般用来存放组件初始后不变的数据,比如人的性别，姓名等</li>\n<li>属性一般用作组件的数据源，一般由父组件传入,比如你的名字一般是由你父母取的</li>\n<li>属性可以通过<code>this.props</code>中取出</li>\n<li><em>propTypes</em>可以用来定义传入组件属性的名称和类型</li>\n<li><code>getDefaultProps</code>函数可以用来定会引起组件的默认属性</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Person = React.createClass(&#123;</div><div class=\"line\">    <span class=\"comment\">//类似于约定了一个接口文档,用于这是验证传递给组件的属性，</span></div><div class=\"line\">    propTypes: &#123;</div><div class=\"line\">        <span class=\"comment\">//定义msg的属性类型为字符串，必须传入</span></div><div class=\"line\">        name: React.PropTypes.string.isRequired,</div><div class=\"line\">        <span class=\"attr\">gender</span>: React.PropTypes.string.isRequired,</div><div class=\"line\">        <span class=\"attr\">age</span>:React.PropTypes.number.isRequired</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">getDefaultProps</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"attr\">name</span>:<span class=\"string\">'无名氏'</span>&#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//属性可以通过属性对象this.props中取出</span></div><div class=\"line\">        <span class=\"keyword\">return</span> (&lt;h1&gt; &#123;this.props.name&#125;</div><div class=\"line\">                     &#123;this.props.gender&#125;</div><div class=\"line\">                     &#123;this.props.age&#125;</div><div class=\"line\">                &lt;/h1&gt;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> props = &#123;</div><div class=\"line\">    <span class=\"attr\">gender</span>:<span class=\"string\">'男'</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">18</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">    &lt;Person &#123;...props&#125; /&gt;,//属性可以在使用组件时传入</div><div class=\"line\">    document.getElementById('app')</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h3 id=\"6-3-this-props-children\"><a href=\"#6-3-this-props-children\" class=\"headerlink\" title=\"6.3 this.props.children\"></a>6.3 this.props.children</h3><p><code>this.props</code>对象的属性与组件实例的属性一一对应,但<code>this.props.children</code>属性表示组件的所有子节点<br><code>React.Children.map</code>是一个工具方法，用于实现对数组元素的映射</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">var Person = React.createClass(&#123;</div><div class=\"line\">    render: function() &#123;</div><div class=\"line\">      return (</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\">                &#123;</div><div class=\"line\">                    React.Children.map(this.props.children,</div><div class=\"line\">                      function (child) &#123;</div><div class=\"line\">                        return <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;child&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>;</div><div class=\"line\">                    &#125;)</div><div class=\"line\">                &#125;</div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\">      );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Person</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>大毛<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>二毛<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>三毛<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Person</span>&gt;</span>,</div><div class=\"line\">    document.getElementById('app')</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h3 id=\"6-4-state状态\"><a href=\"#6-4-state状态\" class=\"headerlink\" title=\"6.4 state状态\"></a>6.4 state状态</h3><ul>\n<li>组件的状态就像人的心情，会经常变化，而且只能由自己来改变</li>\n<li>组件一开始有一个初始状态,然后用户互动,导致状态变化，从而触发界面重新渲染</li>\n</ul>\n<ul>\n<li><code>getInitialState</code>用来定义初始状态</li>\n</ul>\n<ul>\n<li>可以给按钮绑定事件，当事件发生的时候调用对应的方法改变组件的状态</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Person = React.createClass(&#123;</div><div class=\"line\">    <span class=\"attr\">getInitialState</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"attr\">happy</span>: <span class=\"literal\">true</span>&#125;;</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">getDefaultProps</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"attr\">name</span>:<span class=\"string\">'无名氏'</span>&#125;;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">handleClick</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">happy</span>: !<span class=\"keyword\">this</span>.state.happy&#125;);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> heart = <span class=\"keyword\">this</span>.state.happy ? <span class=\"string\">'开心'</span> : <span class=\"string\">'不开心'</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span> &gt;</span></span></div><div class=\"line\">                 &#123;this.props.name&#125; &#123;heart&#125; <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></div><div class=\"line\">                 <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleClick&#125;</span>&gt;</span>变心<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Person</span> <span class=\"attr\">name</span>=<span class=\"string\">\"林志玲\"</span> /&gt;</span>,</span></div><div class=\"line\">    document.getElementById('app')</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p>常用的事件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">剪贴板事件 onKeyDown onKeyPress onKeyUp</div><div class=\"line\">键盘事件 onFocus onBlur</div><div class=\"line\">焦点事件 onChange onInput onSubmit</div><div class=\"line\">鼠标事件 onClick onDoubleClick onMouseDown onMouseEnter onMouseLeave</div></pre></td></tr></table></figure></p>\n<h3 id=\"6-5-表单元素双向数据绑定\"><a href=\"#6-5-表单元素双向数据绑定\" class=\"headerlink\" title=\"6.5 表单元素双向数据绑定\"></a>6.5 表单元素双向数据绑定</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Input = React.createClass(&#123;</div><div class=\"line\">    <span class=\"attr\">getInitialState</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">//获取初始状态</span></div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"attr\">value</span>: <span class=\"string\">'demo'</span>&#125;;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">handleChange</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123; <span class=\"comment\">//处理改变事件</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">value</span>: event.target.value&#125;);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> value = <span class=\"keyword\">this</span>.state.value;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;color:</span>'<span class=\"attr\">red</span>'&#125;&#125; <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span></span></div><div class=\"line\">                <span class=\"attr\">value</span>=<span class=\"string\">&#123;value&#125;</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.handleChange&#125;</span> /&gt;</div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;value&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(<span class=\"tag\">&lt;<span class=\"name\">Input</span>/&gt;</span>, document.getElementById('app'));</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意: 如果给表单元素设置了<code>value</code>属性，则必须指定<code>onChange</code>事件处理函数，否则 此字段会变成只读状态</p>\n</blockquote>\n<h2 id=\"7-复合组件\"><a href=\"#7-复合组件\" class=\"headerlink\" title=\"7. 复合组件\"></a>7. 复合组件</h2><p>多个简单的组件嵌套，可构成一个复杂的复合组件，从而完成复杂的交互逻辑<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Panel = React.createClass(&#123;</div><div class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            &lt;div className=\"panel panel-default\"&gt;</div><div class=\"line\">                &lt;PanelHead head=&#123;this.props.head&#125;/&gt;</div><div class=\"line\">                &lt;PanelBody body=&#123;this.props.body&#125;/&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">var PanelHead = React.createClass(&#123;</div><div class=\"line\">    render: function () &#123;</div><div class=\"line\">        return (</div><div class=\"line\">            &lt;div className=\"panel-heading\"&gt;</div><div class=\"line\">                &#123;this.props.head&#125;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">var PanelBody = React.createClass(&#123;</div><div class=\"line\">    render: function () &#123;</div><div class=\"line\">        return (</div><div class=\"line\">            &lt;div className=\"panel-body\"&gt;</div><div class=\"line\">                &#123;this.props.body&#125;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">    &lt;Panel</div><div class=\"line\">        head=\"头部\"</div><div class=\"line\">        body=\"正文\"</div><div class=\"line\">    /&gt;,</div><div class=\"line\">    document.getElementById('app')</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<h2 id=\"8-组件的生命周期\"><a href=\"#8-组件的生命周期\" class=\"headerlink\" title=\"8. 组件的生命周期\"></a>8. 组件的生命周期</h2><p>React中可以指定在组件的生命周期的不同阶段执行的函数</p>\n<ul>\n<li>渲染前<ul>\n<li>getDefaultProps  在组件类创建的时候调用一次,则此处返回的对象中的相应属性将会合并到<code>this.props</code></li>\n<li>getInitialState 在组件挂载之前调用一次。返回值将会作为<code>this.state</code>的初始值。</li>\n<li>componentWillMount 在首次渲染之前触发</li>\n</ul>\n</li>\n<li>渲染<ul>\n<li>render 当调用的时候，会检测<code>this.props</code>和<code>this.state</code>，返回一个组件</li>\n</ul>\n</li>\n<li>渲染后<ul>\n<li>componentDidMount 在初始化渲染执行之后立刻调用一次</li>\n<li>shouldComponentUpdate 在接收到新的<code>props</code>或者<code>state</code>，将要渲染之前调用,返回<code>false</code>则不更新组件</li>\n<li>componentWillUpdate 做一些更新之前的准备工作</li>\n<li>componentDidUpdate 更新之后触发</li>\n<li>componentWillReceiveProps 在组件接收到新的<code>props</code>的时候调用</li>\n</ul>\n</li>\n<li>移除<ul>\n<li>componentWillUnmount 在组件从DOM中移除的时候立刻被调用</li>\n<li>componentDidUnmount 组件移除之后调用</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MessageBox = React.createClass(&#123;</div><div class=\"line\">    <span class=\"attr\">getInitialState</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'MessageBox.getInitialState'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            <span class=\"attr\">count</span>: <span class=\"number\">0</span>,</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">getDefaultProps</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'MessageBox.getDefaultProps'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">componentWillMount</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'MessageBox.componentWillMount'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">componentDidMount</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'MessageBox.componentDidMount'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">componentWillUnmount</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'MessageBox.componentWillUnmount'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">shouldComponentUpdate</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nextProp, nextState</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'MessageBox.shouldComponentUpdate'</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (nextState.count &gt; <span class=\"number\">10</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">componentWillUpdate</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nextProp, nextState</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'MessageBox.componentWillUpdate'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">componentDidUpdate</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'MessageBox.componentDidUpdate'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">killMySelf</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        ReactDOM.unmountComponentAtNode(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app'</span>));</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">doUpdate</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">            <span class=\"attr\">count</span>: <span class=\"keyword\">this</span>.state.count + <span class=\"number\">1</span>,</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">h1</span> &gt;</span> 计数： &#123;this.state.count&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.killMySelf&#125;</span>&gt;</span>卸载掉这个组件<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.doUpdate&#125;</span>&gt;</span>手动更新一下组件<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Submessage</span> <span class=\"attr\">count</span>=<span class=\"string\">&#123;this.state.count&#125;/</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">var Submessage = React.createClass(&#123;</div><div class=\"line\">    componentWillReceiveProps: function (nextProp) &#123;</div><div class=\"line\">        console.log('Submessage.componentWillReceiveProps');</div><div class=\"line\">    &#125;,</div><div class=\"line\">    shouldComponentUpdate: function (nextProp, nextState) &#123;</div><div class=\"line\">        console.log('Submessage.shouldComponentUpdate');</div><div class=\"line\">        if (nextProp.count &gt; 5) return false;</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    render: function () &#123;</div><div class=\"line\">        return (</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>当前计数是：&#123;this.props.count&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(<span class=\"tag\">&lt;<span class=\"name\">MessageBox</span>/&gt;</span>, document.getElementById('app'));</div></pre></td></tr></table></figure>\n<blockquote>\n<p>ReactDOM.unmountComponentAtNode 从DOM中移除已经挂载的React组件</p>\n</blockquote>\n<h2 id=\"9-DOM操作\"><a href=\"#9-DOM操作\" class=\"headerlink\" title=\"9. DOM操作\"></a>9. DOM操作</h2><p>给组件加上<code>ref=&quot;xxx&quot;</code>后，可在父组件中通过<code>this.refs.xxx</code>获取该DOM元素<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Focus = React.createClass(&#123;</div><div class=\"line\">    <span class=\"attr\">handleClick</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.refs.msg.focus();</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">                &lt;input type=\"text\" ref=\"msg\" /&gt;</div><div class=\"line\">                &lt;input type=\"button\" value=\"获得焦点\"</div><div class=\"line\">                onClick=&#123;this.handleClick&#125; /&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">    &lt;Focus /&gt;,</div><div class=\"line\">    document.getElementById('app')</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<h2 id=\"10-通过Ajax获取数据\"><a href=\"#10-通过Ajax获取数据\" class=\"headerlink\" title=\"10.通过Ajax获取数据\"></a>10.通过Ajax获取数据</h2><h3 id=\"10-1-客户端\"><a href=\"#10-1-客户端\" class=\"headerlink\" title=\"10.1 客户端\"></a>10.1 客户端</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Suggestion = React.createClass(&#123;</div><div class=\"line\">    <span class=\"attr\">getInitialState</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123;&#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">handleChange</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> value = <span class=\"keyword\">this</span>.refs.input.value;</div><div class=\"line\">        $.ajax(&#123;</div><div class=\"line\">            <span class=\"attr\">url</span>: <span class=\"string\">'http://www.baidu.com/su'</span>,</div><div class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">'get'</span>,</div><div class=\"line\">            <span class=\"attr\">jsonp</span>: <span class=\"string\">'cb'</span>,</div><div class=\"line\">            <span class=\"attr\">dataType</span>: <span class=\"string\">'jsonp'</span>,</div><div class=\"line\">            <span class=\"attr\">data</span>: &#123;<span class=\"attr\">wd</span>: value&#125;,</div><div class=\"line\">            <span class=\"attr\">processData</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">            <span class=\"attr\">context</span>:<span class=\"keyword\">this</span>,</div><div class=\"line\">            <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> data = result.s;</div><div class=\"line\">                data = data.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item，index</span>)</span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></div><div class=\"line\">                &#125;);</div><div class=\"line\">                <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">content</span>:data&#125;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"input\"</span></span></div><div class=\"line\">                <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.handleChange&#125;/</span>&gt;</div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">                    &#123;this.state.content&#125;</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(<span class=\"tag\">&lt;<span class=\"name\">Suggestion</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Suggestion</span>&gt;</span>, document.getElementById('app'));</div></pre></td></tr></table></figure>\n<h3 id=\"10-2-服务器端\"><a href=\"#10-2-服务器端\" class=\"headerlink\" title=\"10.2 服务器端\"></a>10.2 服务器端</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\">app.get(<span class=\"string\">'/jsonp'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> wd = req.query.wd;<span class=\"comment\">//得到关键字</span></div><div class=\"line\">    <span class=\"keyword\">var</span> cb = req.query.cb;<span class=\"comment\">//得到回调函数的方法名</span></div><div class=\"line\">    <span class=\"keyword\">var</span> result = &#123;<span class=\"attr\">q</span>:wd,<span class=\"attr\">p</span>:<span class=\"literal\">false</span>,<span class=\"attr\">s</span>:[]&#125;;<span class=\"comment\">//拼结果对象</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)</div><div class=\"line\">        result.s.push(wd+i);</div><div class=\"line\">    <span class=\"comment\">//先设置响应头</span></div><div class=\"line\">    res.setHeader(<span class=\"string\">'Access-Control-Allow-Origin'</span>,<span class=\"string\">\"*\"</span>);</div><div class=\"line\">    res.send(<span class=\"string\">`<span class=\"subst\">$&#123;cb&#125;</span>(<span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify(result)&#125;</span>)`</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">app.listen(<span class=\"number\">9090</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"10-3-ajax方法\"><a href=\"#10-3-ajax方法\" class=\"headerlink\" title=\"10.3 ajax方法\"></a>10.3 ajax方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\">&#123;url,type,data,processData,jsonp,dataType,context,success&#125;</span>)</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">   url+= <span class=\"string\">'?'</span>;</div><div class=\"line\">   <span class=\"keyword\">var</span> params = <span class=\"string\">''</span>;</div><div class=\"line\">   <span class=\"keyword\">if</span>(processData)</div><div class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> attr <span class=\"keyword\">in</span> data)&#123;</div><div class=\"line\">           params += (attr+<span class=\"string\">'='</span>+data[attr]);</div><div class=\"line\">       &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">       url+=data;</div><div class=\"line\">   url+=params;</div><div class=\"line\">   <span class=\"keyword\">var</span> method = <span class=\"string\">'jQuery_'</span>+<span class=\"built_in\">Date</span>.now();</div><div class=\"line\">   url += (<span class=\"string\">'&amp;'</span>+jsonp+<span class=\"string\">'='</span>+method);</div><div class=\"line\">   xhr.open(type,url,<span class=\"literal\">true</span>);</div><div class=\"line\">   xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span>(xhr.readyState == <span class=\"number\">4</span> &amp;&amp; <span class=\"regexp\">/2\\d&#123;2&#125;/</span>.test(xhr.status))&#123;</div><div class=\"line\">           <span class=\"keyword\">var</span> response = xhr.responseText.match(<span class=\"regexp\">/&#123;[^&#123;&#125;]+&#125;/</span>)[<span class=\"number\">0</span>];</div><div class=\"line\">           <span class=\"keyword\">var</span> jsonObj = <span class=\"built_in\">JSON</span>.parse(response);</div><div class=\"line\">           success.bind(context)(jsonObj);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">   xhr.send();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"11-mixin\"><a href=\"#11-mixin\" class=\"headerlink\" title=\"11. mixin\"></a>11. mixin</h2><p>公用抽取出来,让不同的组件共用同一部分逻辑，实现代码重用<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> counterMix = &#123;</div><div class=\"line\">    <span class=\"attr\">getInitialState</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"attr\">count</span>:<span class=\"number\">0</span>&#125;;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">componentWillUpdate</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'componentWillUpdate'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">handleClick</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">count</span>:<span class=\"keyword\">this</span>.state.count+<span class=\"number\">1</span>&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> Counter1 = React.createClass(&#123;</div><div class=\"line\">   <span class=\"attr\">mixins</span>: [counterMix],</div><div class=\"line\">   <span class=\"attr\">render</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> (</div><div class=\"line\">           <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">               &#123;this.state.count&#125;</div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleClick&#125;</span>&gt;</span>增加<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">       )</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> Counter2 = React.createClass(&#123;</div><div class=\"line\">    <span class=\"attr\">mixins</span>: [counterMix],</div><div class=\"line\">    <span class=\"attr\">render</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">                &#123;this.state.count&#125;</div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleClick&#125;</span>&gt;</span>增加<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Counter1</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Counter2</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>,<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app'</span>));</div></pre></td></tr></table></figure></p>\n<h2 id=\"12-插件实现双向数据绑定\"><a href=\"#12-插件实现双向数据绑定\" class=\"headerlink\" title=\"12. 插件实现双向数据绑定\"></a>12. 插件实现双向数据绑定</h2><p>在<code>index.html</code>引入插件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ &lt;script src=&quot;lib/react/react-with-addons.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>JS实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">var Input = React.createClass(&#123;</div><div class=\"line\">    mixins:[React.addons.LinkedStateMixin],</div><div class=\"line\">    getInitialState: function() &#123;//获取初始状态</div><div class=\"line\">        return &#123;msg: &apos;demo&apos;&#125;;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    render: function () &#123;</div><div class=\"line\">        var msg = this.state.msg;</div><div class=\"line\">        return (</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">                &lt;input type=&quot;text&quot; valueLink=&#123;this.linkState(&apos;msg&apos;)&#125; /&gt;</div><div class=\"line\">                &lt;p&gt;&#123;msg&#125;&lt;/p&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(&lt;Input/&gt;, document.getElementById(&apos;app&apos;));</div></pre></td></tr></table></figure></p>\n<h2 id=\"13-留言版\"><a href=\"#13-留言版\" class=\"headerlink\" title=\"13.留言版\"></a>13.留言版</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Board = React.createClass(&#123;</div><div class=\"line\">    <span class=\"attr\">getInitialState</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            <span class=\"attr\">msg</span>: <span class=\"string\">'请输入'</span>,</div><div class=\"line\">            <span class=\"attr\">messages</span>:<span class=\"keyword\">this</span>.props.messages</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">                &lt;h1&gt;&#123;this.props.title&#125;&lt;/h1&gt;</div><div class=\"line\">                &lt;input type=\"text\" defaultValue=&#123;this.state.msg&#125;</div><div class=\"line\">                ref=\"txtMsg\" onClick=&#123;this.clear&#125;/&gt;</div><div class=\"line\">                &lt;input type=\"button\" value='发言' onClick=&#123;this.leaveMsg&#125;/&gt;</div><div class=\"line\">                &lt;ul&gt;</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        this.state.messages.map(function (item, index) &#123;</div><div class=\"line\">                            return &lt;li key=&#123;index&#125;&gt;&#123;item&#125;&lt;/li&gt;</div><div class=\"line\">                        &#125;)</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &lt;/ul&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">        )</div><div class=\"line\">    &#125;,</div><div class=\"line\">    clear:function()&#123;</div><div class=\"line\">        this.refs.txtMsg.value =  '';</div><div class=\"line\">    &#125;,</div><div class=\"line\">    leaveMsg: function (event) &#123;</div><div class=\"line\">     this.state.messages.push(this.refs.txtMsg.value);</div><div class=\"line\">       //每次状态都是一个新的state对象</div><div class=\"line\">     localStorage.setItem('messages',JSON.stringify(this.state.messages));</div><div class=\"line\">     this.setState(&#123;</div><div class=\"line\">           messages:this.state.messages</div><div class=\"line\">     &#125;,function()&#123;</div><div class=\"line\">           this.refs.txtMsg.value =  '';</div><div class=\"line\">     &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">var data = &#123;</div><div class=\"line\">    title: '留言版',</div><div class=\"line\">    messages: JSON.parse(localStorage.getItem('messages'))||[]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">    &lt;Board &#123;...data&#125;/&gt;,</div><div class=\"line\">    document.getElementById('app')</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n"},{"title":"阿里无线前端性能优化(转)","url":"https://jitingsun.github.io/2016/11/05/阿里无线前端性能优化/","content":"<h1 id=\"阿里无线前端性能优化指南-Pt-1-加载优化\"><a href=\"#阿里无线前端性能优化指南-Pt-1-加载优化\" class=\"headerlink\" title=\"阿里无线前端性能优化指南 (Pt.1 加载优化)\"></a>阿里无线前端性能优化指南 (Pt.1 加载优化)</h1><ul>\n<li>来自<a href=\"https://github.com/amfe/article/issues/1\" target=\"_blank\" rel=\"external\">https://github.com/amfe/article/issues/1</a><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2></li>\n</ul>\n<p>阿里无线前端团队在过去一年对所负责业务进行了全面的性能优化。以下是我们根据实际经验总结的优化指南，希望对大家有所帮助。</p>\n<p>第一部分仅包括数据加载期优化。</p>\n<h2 id=\"图片控制\"><a href=\"#图片控制\" class=\"headerlink\" title=\"图片控制\"></a>图片控制</h2><p>对于网页特别是电商类页面来说，图片通常会占据了大量的视觉空间,是页面中最为重要的展现内容，并且占据网页传输字节的大部分。因此，对图片的优化是我们性能优化的重点.</p>\n<h2 id=\"启用WebP\"><a href=\"#启用WebP\" class=\"headerlink\" title=\"启用WebP\"></a>启用WebP</h2><p>WebP是一种支持有损压缩和无损压缩的图片文件格式，派生自视频编码格式 VP8。根据 Google 官方的数据，无损压缩后的 WebP 比 PNG 文件少了 26％ 的文件大小，有损压缩在具有同等SSIM索引的情况下WebP 比 JPEG 文件少25-34%的文件大小。WebP支持无损透明度（也叫做alpha通道），支持动画格式Animated WebP 。</p>\n<p>虽然目前仅Android系统原生支持WebP格式， 但由于其对页面性能优化的巨大意义， 我们会在页面加载时进行环境探测, 如页面渲染环境支持WebP我们会替换页面中的图片链接为WebP格式的版本。 如果页面专门用于可控的客户端内(我们能在客户端中放置专门的WebP decoder)，就算是iOS环境我们也会启用WebP.</p>\n<h2 id=\"优化高分屏和弱网适配\"><a href=\"#优化高分屏和弱网适配\" class=\"headerlink\" title=\"优化高分屏和弱网适配\"></a>优化高分屏和弱网适配</h2><p>从苹果的Retina开始，手机厂商开始越来越多的使用高像素密度显示屏。在浏览器里我们的一个CSS像素往往能对应两个或更多个设备像素，在这种环境下为了追求最好的显示效果,我们会采用数倍于浏览器CSS像素标识的图片尺寸. 这里需要注意的是，如果你采用了2x (两倍CSS像素分辨率) 的图片,由于水平和垂直像素都进行了加倍，最终图片体积会增加4倍(内存占用也会增加4倍). 同理,如果你采用了3x的图片，最终增加的传输体积会增至9倍.</p>\n<p>用户喜欢清晰绚丽的图片， 但用户更加痛恨打不开的页面. 在我们的实践中,我们最多使用2x(两倍CSS像素分辨率)的图片。 如果页面专门用于可控的客户端内，我们会根据从客户端获取的网络情况替换页面所使用的图片资源. 在最糟糕的网络环境(2G移动网络)，我们甚至会采用按30%质量进行压缩的图片以替换原始图片链接。</p>\n<h2 id=\"单张图片大小控制\"><a href=\"#单张图片大小控制\" class=\"headerlink\" title=\"单张图片大小控制\"></a>单张图片大小控制</h2><p>有时，如果不设限无论你如何优化糟糕的情况总会出现。在我们的实践中, 针对图片我们设置了单张图片大小不超过50Kb的限制。在每次发布时,我们会对页面图片进行检查, 如果图片超过这个限制仍需要发布，就得走特别的流程了.</p>\n<h2 id=\"合理使用CSS-SVG-ICON-Font替代图片\"><a href=\"#合理使用CSS-SVG-ICON-Font替代图片\" class=\"headerlink\" title=\"合理使用CSS/SVG/ICON Font替代图片\"></a>合理使用CSS/SVG/ICON Font替代图片</h2><p>传统桌面Web中，针对页面内的图标，我们往往采用Sprite（雪碧图）技术把多个图标合并到一张大图片中，针对不同的图标显示大图中不同的部分。但在移动互联网环境下, 由于设备内存有限，每使用Sprite技术展示一个图标，都需要浏览器把整个大图解码到内存中一次，考虑到前文提到的多倍CSS像素分辨率情况, 占用的内存和解码时间往往是可观的。不合理的使用Sprite技术会造成移动页面性能不升反降。</p>\n<p>更合适的选择是CSS3,SVG和ICON Font技术。如果你的图标能使用这些技术绘制，在任何分辨率和缩放设置都可以提供清晰的效果并减小传输和内存的开销.</p>\n<h2 id=\"对图片进行按需加载\"><a href=\"#对图片进行按需加载\" class=\"headerlink\" title=\"对图片进行按需加载\"></a>对图片进行按需加载</h2><p>电商类型网站多用多图列表页面展现商品内容, 我们会在非WIFI网络环境时对图片资源进行按需加载，仅仅当图片资源出现在首屏或随着用户滑动屏幕进入可见区域时，我们才进行加载. 进行这项优化的关键在于对全局的图片呈现进行一层抽象,以便统一控制.</p>\n<h2 id=\"网络请求\"><a href=\"#网络请求\" class=\"headerlink\" title=\"网络请求\"></a>网络请求</h2><p>今天我们谈论的无线页面，很多时候已不再是传统的”页面”，而是一个个”单页应用”。随着应用复杂度的逐渐增加，所需加载的除图片等静态数据外，动态数据也会越来越多。如果想追求高质量的单页应用,对这些请求的优化势在必行.</p>\n<h2 id=\"域名收敛\"><a href=\"#域名收敛\" class=\"headerlink\" title=\"域名收敛\"></a>域名收敛</h2><p>如果你页面中引入的各种资源来自不同的域名，注意每增加一个域名,都会增加一次域名解析开销。 在复杂的国内移动互联网网络环境下，不同域名的解析速度可能会相差数十倍。 所以你需要有意识的收敛页面资源所需解析的域名数, 特别是会阻塞页面渲染的CSS,JS,Font资源。 很多性能糟糕页面究其原因或许会是引入的资源域名解析速度很慢或完全不能正确解析。在我们的实践中, 一个页面所产生的域名解析数不能超过5个。</p>\n<h2 id=\"减少请求数\"><a href=\"#减少请求数\" class=\"headerlink\" title=\"减少请求数\"></a>减少请求数</h2><p>在优化了需要解析的域名数后，你需要关注页面资源请求数. 如果是长期维护的产品型页面 ，页面中引入的静态资源除最通用的基础库外需要按依赖顺序进行合并压缩. 一般是JS和CSS请求各一。 针对电商厂商多见的营销活动页面，我们甚至开发了工具把全部的CSS和JS资源内联入页面，从而实现除图片外的其余资源One Request就能获得.</p>\n<p>另外，资源请求重定向也应该尽量避免,少一次重定向，少一个请求数.</p>\n<h2 id=\"文本数据的优化与压缩\"><a href=\"#文本数据的优化与压缩\" class=\"headerlink\" title=\"文本数据的优化与压缩\"></a>文本数据的优化与压缩</h2><p>文本数据(HTML,CSS,JavaScript)的优化与压缩分为三个阶段，分别是发布准备(去除注释,合并CSS声明,去除不会被执行的JS代码块), 编译期压缩(合并文件，去除空格，混淆) 和 传输阶段压缩( GZip ) . 这项优化的关键在于梳理流程确保压缩的自动化和服务器GZip指令被正确配置。</p>\n<h2 id=\"数据接口优化与监控\"><a href=\"#数据接口优化与监控\" class=\"headerlink\" title=\"数据接口优化与监控\"></a>数据接口优化与监控</h2><p>随着近两年Web前后端分离思潮的流行与前端模板技术的发展 , 我们越来越倾向在页面加载完成后再通过接口获取JSON数据并在前端进行页面渲染。这种方式带来了页面第一次加载速度的提升，但常常把原有的性能问题隐藏了起来。 需要花功夫优化的数据获取并最终呈现时间往往被隐藏在空页面快速呈现的表象之下。更严重的情况发生在需要从多个不同接口获取数据，并且这些接口调用还存在互相依赖的情况下，一旦出现这样的情况，页面性能往往是不升反降的.</p>\n<p>在我们的实践中, 我们要求数据在后端组装完成后再交由前端渲染，一屏中完整渲染所需数据不能来自多过一个接口。 所有数据源统一收敛到单一的接口服务层，以便进行统计和监控。</p>\n"},{"title":"验证码小demo","url":"https://jitingsun.github.io/2016/11/04/验证码小demo/","content":"<h2 id=\"css部分\"><a href=\"#css部分\" class=\"headerlink\" title=\"css部分\"></a>css部分</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">width: 300px; height: 200px; border: 3px solid #ccc; border-radius: 5px; box-shadow: 3px 3px 10px #111; margin: 30px auto; font-family: microsoft yahei; font-size: 100px; line-height: 200px; text-align: center; font-weight: bold; -webkit-user-select: none; cursor: pointer;</div></pre></td></tr></table></figure>\n<h2 id=\"js部分\"><a href=\"#js部分\" class=\"headerlink\" title=\"js部分\"></a>js部分</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">var codeBox = document.getElementById(&apos;codeBox&apos;);</div><div class=\"line\">  //设定验证码每一个随机字符的范围</div><div class=\"line\">  var strRange = &quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;</div><div class=\"line\">  //这个取值范围的索引是从0-61</div><div class=\"line\">  function change()&#123;</div><div class=\"line\">      var codeBoxHtml = &apos;&apos;; //&quot;A856&quot; + &quot;a&quot; &apos;a&apos;  如何判断  a8  a</div><div class=\"line\">      for(var i=0; i&lt;4; i++)&#123;</div><div class=\"line\">          var ranNum = getRandom(0,61); //获取0-61之间的随机整数</div><div class=\"line\">          var ranChar =  strRange.charAt(ranNum);</div><div class=\"line\">          codeBoxHtml += ranChar;</div><div class=\"line\">      &#125;</div><div class=\"line\">      codeBox.innerHTML = codeBoxHtml;</div><div class=\"line\">  &#125;</div><div class=\"line\">  change();</div><div class=\"line\">  codeBox.onclick = change;</div><div class=\"line\"></div><div class=\"line\">  //绑定事件的本质就是把一个函数的引用地址(空间地址)赋值给dom对象的事件属性</div><div class=\"line\"></div><div class=\"line\">  //不能获取相同的并且大小写也不能相同:</div><div class=\"line\"></div><div class=\"line\">  function getRandom(n,m)&#123;</div><div class=\"line\">      n = Number(n);</div><div class=\"line\">      m = Number(m);</div><div class=\"line\">      if(isNaN(n) || isNaN(m) )&#123;</div><div class=\"line\">          return Math.random();</div><div class=\"line\">      &#125;</div><div class=\"line\">      if(n&gt;m)&#123;</div><div class=\"line\">          var temp = n;</div><div class=\"line\">          n = m;</div><div class=\"line\">          m = temp;</div><div class=\"line\">      &#125;</div><div class=\"line\">      return Math.round(Math.random()*(m-n)+n);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>"},{"title":"es-6","url":"https://jitingsun.github.io/2016/11/02/es-6/","content":"<h1 id=\"JavaScript-ES6\"><a href=\"#JavaScript-ES6\" class=\"headerlink\" title=\"JavaScript ES6\"></a>JavaScript ES6</h1><p>JavaScript 在过去几年里发生了很大的变化。这里介绍 12 个你马上就能用的新功能。</p>\n<h1 id=\"核心-ES6-功能\"><a href=\"#核心-ES6-功能\" class=\"headerlink\" title=\"核心 ES6 功能\"></a>核心 ES6 功能</h1><p>你可以在浏览器的控制台中测试所有下面的代码片段。</p>\n<p><img src=\"http://adrianmejia.com/images/javascript-es6-classes-on-browser-console.png\" alt=\"\" title=\"Testing Javascript ES6 classes on browser console\"></p>\n<p>不要笃信我的话，而是要亲自去测试每一个 ES5 和 ES6 示例。让我们开始动手吧 💪</p>\n<h2 id=\"变量的块级作用域\"><a href=\"#变量的块级作用域\" class=\"headerlink\" title=\"变量的块级作用域\"></a>变量的块级作用域</h2><p>使用 ES6，声明变量我们可以用 <code>var</code> ，也可以用 <code>let</code> 或 <code>const</code>。</p>\n<p><code>var</code> 有什么不足？</p>\n<p>使用 <code>var</code> 的问题是变量会漏入其他代码块中，诸如 <code>for</code> 循环或 <code>if</code> 代码块。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES5</div><div class=\"line\">var x = &apos;outer&apos;;</div><div class=\"line\">function test(inner) &#123;</div><div class=\"line\">  if (inner) &#123;</div><div class=\"line\">    var x = &apos;inner&apos;; // 作用于整个 function</div><div class=\"line\">    return x;</div><div class=\"line\">  &#125;</div><div class=\"line\">  return x; // 因为第四行的声明提升，被重新定义</div><div class=\"line\">&#125;</div><div class=\"line\">test(false); // undefined 😱</div><div class=\"line\">test(true); // inner</div></pre></td></tr></table></figure>\n<p>对于 <code>test(fasle)</code> ，你期望返回 <code>outer</code>，<strong>但是</strong>，你得到的是 <code>undefined</code>。</p>\n<p>为什么？</p>\n<p>因为尽管没有执行 <code>if</code> 代码块，第四行中的表达式 <code>var x</code> 也会被提升。</p>\n<blockquote>\n<p>var <strong>提升</strong>：</p>\n<ul>\n<li><code>var</code> 是函数作用域。在整个函数中甚至是声明语句之前都是可用的。</li>\n<li>声明被提升。所以你能在声明之前使用一个变量。</li>\n<li>初始化是不被提升的。如果你使用 <code>var</code> 声明变量，请总是将它放在顶部。</li>\n<li>在应用了声明提升规则之后，我们就能更容易地理解发生了什么：</li>\n</ul>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES5</div><div class=\"line\">var x = &apos;outer&apos;;</div><div class=\"line\">function test(inner) &#123;</div><div class=\"line\">    var x; // 声明提升</div><div class=\"line\">    if (inner) &#123;</div><div class=\"line\">        x = &apos;inner&apos;; // 初始化不被提升</div><div class=\"line\">        return x;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return x;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre></blockquote>\n<p>ECMAScript 2015 找到了解决的办法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES6</div><div class=\"line\">let x = &apos;outer&apos;;</div><div class=\"line\">function test(inner) &#123;</div><div class=\"line\">  if (inner) &#123;</div><div class=\"line\">    let x = &apos;inner&apos;;</div><div class=\"line\">    return x;</div><div class=\"line\">  &#125;</div><div class=\"line\">  return x; // 从第一行获取到预期结果</div><div class=\"line\">&#125;</div><div class=\"line\">test(false); // outer</div><div class=\"line\">test(true); // inner</div></pre></td></tr></table></figure>\n<p>将 <code>var</code> 改为 <code>let</code>，代码将像期望的那样运行。如果 <code>if</code> 代码块没有被调用，<code>x</code> 变量也就不会在代码块外被提升。</p>\n<blockquote>\n<p>let <strong>提升</strong> 和“暂存死区（temporal dead zone）”</p>\n<ul>\n<li>在 ES6 中，<code>let</code> 将变量提升到代码块的顶部（不是像 ES5 那样的函数顶部）。</li>\n<li>然而，代码块中，在变量声明之前引用它会导致 <code>ReferenceError</code> 错误。</li>\n<li><code>let</code> 是块级作用域。你不能在它被声明之前引用它。</li>\n<li>“暂存死区（Temporal dead zone）”是指从代码块开始直到变量被声明之间的区域。</li>\n</ul>\n</blockquote>\n<p><strong>IIFE</strong></p>\n<p>在解释 IIFE 之前让我们看一个例子。来看一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES5</div><div class=\"line\">&#123;</div><div class=\"line\">  var private = 1;</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(private); // 1</div></pre></td></tr></table></figure>\n<p>如你所见，<code>private</code> 漏出(代码块)。你需要使用 IIFE（immediately-invoked function expression，立即执行函数表达式）来包含它：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES5</div><div class=\"line\">(function()&#123;</div><div class=\"line\">  var private2 = 1;</div><div class=\"line\">&#125;)();</div><div class=\"line\">console.log(private2); // Uncaught ReferenceError</div></pre></td></tr></table></figure>\n<p>如果你看一看 jQuery/loadsh 或其他开源项目，你会注意到他们用 IIFE 来避免污染全局环境而且只在全局中定义了诸如 <code>_</code>，<code>$</code>和<code>jQuery</code>。 </p>\n<p>在 ES6 上则一目了然，我们可以只用代码块和 <code>let</code>，也不再需要使用 IIFE了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES6</div><div class=\"line\">&#123;</div><div class=\"line\">  let private3 = 1;</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(private3); // Uncaught ReferenceError</div></pre></td></tr></table></figure>\n<p><strong>Const</strong></p>\n<p>如果你想要一个变量保持不变（常量），你也可以使用 <code>const</code>。</p>\n<p><img src=\"http://adrianmejia.com/images/javascript-es6-const-variables-example.png\" alt=\"\" title=\"const variable example\"></p>\n<blockquote>\n<p>总之：用 <code>let</code>，<code>const</code> 而不是 <code>var</code></p>\n<ul>\n<li>对所有引用使用 <code>const</code>；避免使用 <code>var</code>。</li>\n<li>如果你必须重新指定引用，用 <code>let</code> 替代 <code>const</code>。</li>\n</ul>\n</blockquote>\n<h2 id=\"模板字面量\"><a href=\"#模板字面量\" class=\"headerlink\" title=\"模板字面量\"></a>模板字面量</h2><p>有了模板字面量，我们就不用做多余的嵌套拼接了。来看一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES5</div><div class=\"line\">var first = &apos;Adrian&apos;;</div><div class=\"line\">var last = &apos;Mejia&apos;;</div><div class=\"line\">console.log(&apos;Your name is &apos; + first + &apos; &apos; + last + &apos;.&apos;);</div></pre></td></tr></table></figure>\n<p>现在你可以使用反引号 (`) 和字符串插值 <code>${}</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES6</div><div class=\"line\">const first = &apos;Adrian&apos;;</div><div class=\"line\">const last = &apos;Mejia&apos;;</div><div class=\"line\">console.log(`Your name is $&#123;first&#125; $&#123;last&#125;.`);</div></pre></td></tr></table></figure>\n<h2 id=\"多行字符串\"><a href=\"#多行字符串\" class=\"headerlink\" title=\"多行字符串\"></a>多行字符串</h2><p>我们再也不需要添加 + <code>\\n</code> 来拼接字符串了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES5</div><div class=\"line\">var template = &apos;&lt;li *ngFor=&quot;let todo of todos&quot; [ngClass]=&quot;&#123;completed: todo.isDone&#125;&quot; &gt;\\n&apos; +</div><div class=\"line\">&apos;  &lt;div class=&quot;view&quot;&gt;\\n&apos; +</div><div class=\"line\">&apos;    &lt;input class=&quot;toggle&quot; type=&quot;checkbox&quot; [checked]=&quot;todo.isDone&quot;&gt;\\n&apos; +</div><div class=\"line\">&apos;    &lt;label&gt;&lt;/label&gt;\\n&apos; +</div><div class=\"line\">&apos;    &lt;button class=&quot;destroy&quot;&gt;&lt;/button&gt;\\n&apos; +</div><div class=\"line\">&apos;  &lt;/div&gt;\\n&apos; +</div><div class=\"line\">&apos;  &lt;input class=&quot;edit&quot; value=&quot;&quot;&gt;\\n&apos; +</div><div class=\"line\">&apos;&lt;/li&gt;&apos;;</div><div class=\"line\">console.log(template);</div></pre></td></tr></table></figure>\n<p>在 ES6 上， 我们可以同样使用反引号来解决这个问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES6</div><div class=\"line\">const template = `&lt;li *ngFor=&quot;let todo of todos&quot; [ngClass]=&quot;&#123;completed: todo.isDone&#125;&quot; &gt;</div><div class=\"line\">  &lt;div class=&quot;view&quot;&gt;</div><div class=\"line\">    &lt;input class=&quot;toggle&quot; type=&quot;checkbox&quot; [checked]=&quot;todo.isDone&quot;&gt;</div><div class=\"line\">    &lt;label&gt;&lt;/label&gt;</div><div class=\"line\">    &lt;button class=&quot;destroy&quot;&gt;&lt;/button&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;input class=&quot;edit&quot; value=&quot;&quot;&gt;</div><div class=\"line\">&lt;/li&gt;`;</div><div class=\"line\">console.log(template);</div></pre></td></tr></table></figure>\n<p>两段代码的结果是完全一样的。</p>\n<h2 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h2><p>ES6 的解构不仅实用而且很简洁。如下例所示：</p>\n<p><strong>从数组中获取元素</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES5</div><div class=\"line\">var array = [1, 2, 3, 4];</div><div class=\"line\">var first = array[0];</div><div class=\"line\">var third = array[2];</div><div class=\"line\">console.log(first, third); // 1 3</div></pre></td></tr></table></figure>\n<p>等同于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">const array = [1, 2, 3, 4];</div><div class=\"line\">const [first, ,third] = array;</div><div class=\"line\">console.log(first, third); // 1 3</div></pre></td></tr></table></figure>\n<p><strong>交换值</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES5</div><div class=\"line\">var a = 1;</div><div class=\"line\">var b = 2;</div><div class=\"line\">var tmp = a;</div><div class=\"line\">a = b;</div><div class=\"line\">b = tmp;</div><div class=\"line\">console.log(a, b); // 2 1</div></pre></td></tr></table></figure>\n<p>等同于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES6</div><div class=\"line\">let a = 1;</div><div class=\"line\">let b = 2;</div><div class=\"line\">[a, b] = [b, a];</div><div class=\"line\">console.log(a, b); // 2 1</div></pre></td></tr></table></figure>\n<p><strong>多个返回值的解构</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES5</div><div class=\"line\">function margin() &#123;</div><div class=\"line\">  var left=1, right=2, top=3, bottom=4;</div><div class=\"line\">  return &#123; left: left, right: right, top: top, bottom: bottom &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">var data = margin();</div><div class=\"line\">var left = data.left;</div><div class=\"line\">var bottom = data.bottom;</div><div class=\"line\">console.log(left, bottom); // 1 4</div></pre></td></tr></table></figure>\n<p>在第 3 行中，你也可以用一个像这样的数组返回（同时省去了一些编码）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">return [left, right, top, bottom];</div></pre></td></tr></table></figure>\n<p>但另一方面，调用者需要考虑返回数据的顺序。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var left = data[0];</div><div class=\"line\">var bottom = data[3];</div></pre></td></tr></table></figure>\n<p>用 ES6，调用者只需选择他们需要的数据即可（第 6 行）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES6</div><div class=\"line\"></div><div class=\"line\">function margin() &#123;</div><div class=\"line\">  const left=1, right=2, top=3, bottom=4;</div><div class=\"line\">  return &#123; left, right, top, bottom &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">const &#123; left, bottom &#125; = margin();</div><div class=\"line\">console.log(left, bottom); // 1 4</div></pre></td></tr></table></figure>\n<p><em>注意：</em> 在第 3 行中，我们使用了一些其他的 ES6 功能。我们将 <code>{ left: left }</code> 简化到只有 <code>{ left }</code>。与 ES5 版本相比，它变得如此简洁。酷不酷？</p>\n<p><strong>参数匹配的解构</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES5</div><div class=\"line\">var user = &#123;firstName: &apos;Adrian&apos;, lastName: &apos;Mejia&apos;&#125;;</div><div class=\"line\">function getFullName(user) &#123;</div><div class=\"line\">  var firstName = user.firstName;</div><div class=\"line\">  var lastName = user.lastName;</div><div class=\"line\">  return firstName + &apos; &apos; + lastName;</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(getFullName(user)); // Adrian Mejia</div></pre></td></tr></table></figure>\n<p>等同于（但更简洁）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES6</div><div class=\"line\">const user = &#123;firstName: &apos;Adrian&apos;, lastName: &apos;Mejia&apos;&#125;;</div><div class=\"line\">function getFullName(&#123; firstName, lastName &#125;) &#123;</div><div class=\"line\">  return `$&#123;firstName&#125; $&#123;lastName&#125;`;</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(getFullName(user)); // Adrian Mejia</div></pre></td></tr></table></figure>\n<p><strong>深度匹配</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES5</div><div class=\"line\">function settings() &#123;</div><div class=\"line\">  return &#123; display: &#123; color: &apos;red&apos; &#125;, keyboard: &#123; layout: &apos;querty&apos;&#125; &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">var tmp = settings();</div><div class=\"line\">var displayColor = tmp.display.color;</div><div class=\"line\">var keyboardLayout = tmp.keyboard.layout;</div><div class=\"line\">console.log(displayColor, keyboardLayout); // red querty</div></pre></td></tr></table></figure>\n<p>等同于（但更简洁）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES6</div><div class=\"line\">function settings() &#123;</div><div class=\"line\">  return &#123; display: &#123; color: &apos;red&apos; &#125;, keyboard: &#123; layout: &apos;querty&apos;&#125; &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">const &#123; display: &#123; color: displayColor &#125;, keyboard: &#123; layout: keyboardLayout &#125;&#125; = settings();</div><div class=\"line\">console.log(displayColor, keyboardLayout); // red querty</div></pre></td></tr></table></figure>\n<p>这也称作对象的解构。</p>\n<p>如你所见，解构是非常实用的而且有利于促进良好的编码风格。</p>\n<blockquote>\n<p>最佳实践:</p>\n<ul>\n<li>使用数组解构去获取元素或交换值。它可以避免创建临时引用。</li>\n<li>不要对多个返回值使用数组解构，而是要用对象解构。</li>\n</ul>\n</blockquote>\n<h2 id=\"类和对象\"><a href=\"#类和对象\" class=\"headerlink\" title=\"类和对象\"></a>类和对象</h2><p>用 ECMAScript 6，我们从“构造函数”🔨 来到了“类”🍸。</p>\n<blockquote>\n<p>在 JavaScript 中，每个对象都有一个原型对象。所有的 JavaScript 对象都从它们的原型对象那里继承方法和属性。</p>\n</blockquote>\n<p>在 ES5 中，为了实现面向对象编程（OOP），我们使用构造函数来创建对象，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES5</div><div class=\"line\">var Animal = (function () &#123;</div><div class=\"line\">  function MyConstructor(name) &#123;</div><div class=\"line\">    this.name = name;</div><div class=\"line\">  &#125;</div><div class=\"line\">  MyConstructor.prototype.speak = function speak() &#123;</div><div class=\"line\">    console.log(this.name + &apos; makes a noise.&apos;);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  return MyConstructor;</div><div class=\"line\">&#125;)();</div><div class=\"line\">var animal = new Animal(&apos;animal&apos;);</div><div class=\"line\">animal.speak(); // animal makes a noise.</div></pre></td></tr></table></figure></p>\n<p>ES6 中有了一些语法糖。通过像 <code>class</code> 和 <code>constructor</code> 这样的关键字和减少样板代码，我们可以做到同样的事情。另外，<code>speak()</code> 相对照 <code>constructor.prototype.speak = function ()</code>  更加清晰：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES6</div><div class=\"line\">class Animal &#123;</div><div class=\"line\">  constructor(name) &#123;</div><div class=\"line\">    this.name = name;</div><div class=\"line\">  &#125;</div><div class=\"line\">  speak() &#123;</div><div class=\"line\">    console.log(this.name + &apos; makes a noise.&apos;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">const animal = new Animal(&apos;animal&apos;);</div><div class=\"line\">animal.speak(); // animal makes a noise.</div></pre></td></tr></table></figure>\n<p>正如你所见，两种式样（ES5 与 6）在幕后产生相同的结果而且用法一致。</p>\n<blockquote>\n<p>最佳实践：</p>\n<ul>\n<li>总是使用 <code>class</code> 语法并避免直接直接操纵 <code>prototype</code>。为什么？因为它让代码更加简洁和易于理解。</li>\n<li>避免使用空的构造函数。如果没有指定，类有一个默认的构造函数。</li>\n</ul>\n</blockquote>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>基于前面的 <code>Animal</code> 类。 让我们扩展它并定义一个 <code>Lion</code> 类。</p>\n<p>在 ES5 中，它更多的与原型继承有关。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES5</div><div class=\"line\">var Lion = (function () &#123;</div><div class=\"line\">  function MyConstructor(name)&#123;</div><div class=\"line\">    Animal.call(this, name);</div><div class=\"line\">  &#125;</div><div class=\"line\">  // 原型继承</div><div class=\"line\">  MyConstructor.prototype = Object.create(Animal.prototype);</div><div class=\"line\">  MyConstructor.prototype.constructor = Animal;</div><div class=\"line\">  MyConstructor.prototype.speak = function speak() &#123;</div><div class=\"line\">    Animal.prototype.speak.call(this);</div><div class=\"line\">    console.log(this.name + &apos; roars 🦁&apos;);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  return MyConstructor;</div><div class=\"line\">&#125;)();</div><div class=\"line\">var lion = new Lion(&apos;Simba&apos;);</div><div class=\"line\">lion.speak(); // Simba makes a noise.</div><div class=\"line\">// Simba roars.</div></pre></td></tr></table></figure>\n<p>我不会重复所有的细节，但请注意：</p>\n<ul>\n<li>第 3 行中，我们添加参数显式调用了 <code>Animal</code> 构造函数。</li>\n<li>第 7-8 行，我们将 <code>Lion</code> 原型指派给 <code>Animal</code> 原型。</li>\n<li>第 11行中，我们调用了父类 <code>Animal</code> 的 <code>speak</code> 方法。</li>\n</ul>\n<p>在 ES6 中，我们有了新关键词 <code>extends</code> 和 <code>super</code> <img src=\"http://adrianmejia.com/images/superman_shield.svg\" width=\"25\" height=\"25\" alt=\"superman shield\" style=\"display:inline-block;\" data-pin-nopin=\"true\">。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES6</div><div class=\"line\">class Lion extends Animal &#123;</div><div class=\"line\">  speak() &#123;</div><div class=\"line\">    super.speak();</div><div class=\"line\">    console.log(this.name + &apos; roars 🦁&apos;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">const lion = new Lion(&apos;Simba&apos;);</div><div class=\"line\">lion.speak(); // Simba makes a noise.</div><div class=\"line\">// Simba roars.</div></pre></td></tr></table></figure>\n<p>虽然 ES6 和 ES5 的代码作用一致，但是 ES6 的代码显得更易读。更胜一筹！</p>\n<blockquote>\n<p>最佳实践：</p>\n<ul>\n<li>使用  <code>extends</code> 内置方法实现继承。</li>\n</ul>\n</blockquote>\n<h2 id=\"原生-Promises\"><a href=\"#原生-Promises\" class=\"headerlink\" title=\"原生 Promises\"></a>原生 Promises</h2><p>从回调地狱 👹 到 promises 🙏。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES5</div><div class=\"line\">function printAfterTimeout(string, timeout, done)&#123;</div><div class=\"line\">  setTimeout(function()&#123;</div><div class=\"line\">    done(string);</div><div class=\"line\">  &#125;, timeout);</div><div class=\"line\">&#125;</div><div class=\"line\">printAfterTimeout(&apos;Hello &apos;, 2e3, function(result)&#123;</div><div class=\"line\">  console.log(result);</div><div class=\"line\">  // 嵌套回调</div><div class=\"line\">  printAfterTimeout(result + &apos;Reader&apos;, 2e3, function(result)&#123;</div><div class=\"line\">    console.log(result);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>我们有一个接收一个回调的函数，当 <code>done</code> 时执行。我们必须一个接一个地执行它两次。这也是为什么我们在回调中第二次调用  <code>printAfterTimeout</code> 的原因。</p>\n<p>如果你需要第 3 次或第 4 次回调，可能很快就会变得混乱。来看看我们用 promises 的写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES6</div><div class=\"line\">function printAfterTimeout(string, timeout)&#123;</div><div class=\"line\">  return new Promise((resolve, reject) =&gt; &#123;</div><div class=\"line\">    setTimeout(function()&#123;</div><div class=\"line\">      resolve(string);</div><div class=\"line\">    &#125;, timeout);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">printAfterTimeout(&apos;Hello &apos;, 2e3).then((result) =&gt; &#123;</div><div class=\"line\">  console.log(result);</div><div class=\"line\">  return printAfterTimeout(result + &apos;Reader&apos;, 2e3);</div><div class=\"line\">&#125;).then((result) =&gt; &#123;</div><div class=\"line\">  console.log(result);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>如你所见，使用 promises 我们能在函数完成后进行一些操作。不再需要嵌套函数。</p>\n<h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><p>ES6 没有移除函数表达式，但是新增了一种，叫做箭头函数。</p>\n<p>在 ES5 中，对于 <code>this</code> 我们有一些问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES5</div><div class=\"line\">var _this = this; // 保持一个引用</div><div class=\"line\">$(&apos;.btn&apos;).click(function(event)&#123;</div><div class=\"line\">  _this.sendData(); // 引用的是外层的 this</div><div class=\"line\">&#125;);</div><div class=\"line\">$(&apos;.input&apos;).on(&apos;change&apos;,function(event)&#123;</div><div class=\"line\">  this.sendData(); // 引用的是外层的 this</div><div class=\"line\">&#125;.bind(this)); // 绑定到外层的 this</div></pre></td></tr></table></figure>\n<p>你需要使用一个临时的 <code>this</code> 在函数内部进行引用或用 <code>bind</code> 绑定。在 ES6 中，你可以用箭头函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES6</div><div class=\"line\">// 引用的是外部的那个 this</div><div class=\"line\">$(&apos;.btn&apos;).click((event) =&gt;  this.sendData());</div><div class=\"line\">// 隐式返回</div><div class=\"line\">const ids = [291, 288, 984];</div><div class=\"line\">const messages = ids.map(value =&gt; `ID is $&#123;value&#125;`);</div></pre></td></tr></table></figure>\n<h2 id=\"For…of\"><a href=\"#For…of\" class=\"headerlink\" title=\"For…of\"></a>For…of</h2><p>从 <code>for</code> 到 <code>forEach</code> 再到 <code>for...of</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES5</div><div class=\"line\">// for</div><div class=\"line\">var array = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;];</div><div class=\"line\">for (var i = 0; i &lt; array.length; i++) &#123;</div><div class=\"line\">  var element = array[i];</div><div class=\"line\">  console.log(element);</div><div class=\"line\">&#125;</div><div class=\"line\">// forEach</div><div class=\"line\">array.forEach(function (element) &#123;</div><div class=\"line\">  console.log(element);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>ES6 的 for…of 同样可以实现迭代。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES6</div><div class=\"line\">// for ...of</div><div class=\"line\">const array = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;];</div><div class=\"line\">for (const element of array) &#123;</div><div class=\"line\">    console.log(element);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h2><p>从检查一个变量是否被定义到重新指定一个值再到 <code>default parameters</code>。<br>你以前写过类似这样的代码吗？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES5</div><div class=\"line\">function point(x, y, isFlag)&#123;</div><div class=\"line\">  x = x || 0;</div><div class=\"line\">  y = y || -1;</div><div class=\"line\">  isFlag = isFlag || true;</div><div class=\"line\">  console.log(x,y, isFlag);</div><div class=\"line\">&#125;</div><div class=\"line\">point(0, 0) // 0 -1 true 😱</div><div class=\"line\">point(0, 0, false) // 0 -1 true 😱😱</div><div class=\"line\">point(1) // 1 -1 true</div><div class=\"line\">point() // 0 -1 true</div></pre></td></tr></table></figure>\n<p>可能有过，这是一种检查变量是否赋值的常见模式，不然则分配一个默认值。然而，这里有一些问题：</p>\n<ul>\n<li>第 8 行中，我们传入 <code>0, 0</code> 返回了 <code>0, -1</code>。</li>\n<li>第 9 行中， 我们传入 <code>false</code> 但是返回了 <code>true</code>。</li>\n</ul>\n<p>如果你传入一个布尔值作为默认参数或将值设置为 0，它不能正常起作用。你知道为什么吗？在讲完 ES6 示例后我会告诉你。</p>\n<p>用 ES6，现在你可以用更少的代码做到更好！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES6</div><div class=\"line\">function point(x = 0, y = -1, isFlag = true)&#123;</div><div class=\"line\">  console.log(x,y, isFlag);</div><div class=\"line\">&#125;</div><div class=\"line\">point(0, 0) // 0 0 true</div><div class=\"line\">point(0, 0, false) // 0 0 false</div><div class=\"line\">point(1) // 1 -1 true</div><div class=\"line\">point() // 0 -1 true</div></pre></td></tr></table></figure>\n<p>请注意第 5 行和第 6 行，我们得到了预期的结果。ES5 示例则无效。首先检查是否等于 <code>undefined</code>，因为 <code>false</code>，<code>null</code>，<code>undefined</code> 和 <code>0</code> 都是假值，我们可以避开这些数字，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES5</div><div class=\"line\">function point(x, y, isFlag)&#123;</div><div class=\"line\">  x = x || 0;</div><div class=\"line\">  y = typeof(y) === &apos;undefined&apos; ? -1 : y;</div><div class=\"line\">  isFlag = typeof(isFlag) === &apos;undefined&apos; ? true : isFlag;</div><div class=\"line\">  console.log(x,y, isFlag);</div><div class=\"line\">&#125;</div><div class=\"line\">point(0, 0) // 0 0 true</div><div class=\"line\">point(0, 0, false) // 0 0 false</div><div class=\"line\">point(1) // 1 -1 true</div><div class=\"line\">point() // 0 -1 true</div></pre></td></tr></table></figure>\n<p>当我们检查是否为 <code>undefined</code> 后，获得了期望的结果。</p>\n<h2 id=\"剩余参数\"><a href=\"#剩余参数\" class=\"headerlink\" title=\"剩余参数\"></a>剩余参数</h2><p>从参数到剩余参数和扩展操作符。</p>\n<p>在 ES5 中，获取任意数量的参数是非常麻烦的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES5</div><div class=\"line\">function printf(format) &#123;</div><div class=\"line\">  var params = [].slice.call(arguments, 1);</div><div class=\"line\">  console.log(&apos;params: &apos;, params);</div><div class=\"line\">  console.log(&apos;format: &apos;, format);</div><div class=\"line\">&#125;</div><div class=\"line\">printf(&apos;%s %d %.2f&apos;, &apos;adrian&apos;, 321, Math.PI);</div></pre></td></tr></table></figure>\n<p>我们可以用 rest 操作符 <code>...</code> 做到同样的事情。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES6</div><div class=\"line\"></div><div class=\"line\">function printf(format, ...params) &#123;</div><div class=\"line\">  console.log(&apos;params: &apos;, params);</div><div class=\"line\">  console.log(&apos;format: &apos;, format);</div><div class=\"line\">&#125;</div><div class=\"line\">printf(&apos;%s %d %.2f&apos;, &apos;adrian&apos;, 321, Math.PI);</div></pre></td></tr></table></figure>\n<h2 id=\"展开运算符\"><a href=\"#展开运算符\" class=\"headerlink\" title=\"展开运算符\"></a>展开运算符</h2><p>从 <code>apply()</code> 到展开运算符。我们同样用 <code>...</code> 来解决：</p>\n<blockquote>\n<p>提醒：我们使用 <code>apply()</code> 将数组转换为一列参数。例如，<code>Math.max()</code> 作用于一列参数，但是如果我们有一个数组，我们就能用 <code>apply</code> 让它生效。</p>\n</blockquote>\n<p><img src=\"http://adrianmejia.com/images/javascript-math-apply-arrays.png\" alt=\"\" title=\"JavaScript Math apply for arrays\"></p>\n<p>正如我们较早之前看过的，我们可以使用 <code>apply</code> 将数组作为参数列表传递：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES5</div><div class=\"line\">Math.max.apply(Math, [2,100,1,6,43]) // 100</div></pre></td></tr></table></figure>\n<p>在 ES6 中，你可以用展开运算符：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES6</div><div class=\"line\">Math.max(...[2,100,1,6,43]) // 100</div></pre></td></tr></table></figure>\n<p>同样，从 <code>concat</code> 数组到使用展开运算符：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES5</div><div class=\"line\">var array1 = [2,100,1,6,43];</div><div class=\"line\">var array2 = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;];</div><div class=\"line\">var array3 = [false, true, null, undefined];</div><div class=\"line\">console.log(array1.concat(array2, array3));</div></pre></td></tr></table></figure>\n<p>在 ES6 中，你可以用展开运算符来压平嵌套：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES6</div><div class=\"line\">const array1 = [2,100,1,6,43];</div><div class=\"line\">const array2 = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;];</div><div class=\"line\">const array3 = [false, true, null, undefined];</div><div class=\"line\">console.log([...array1, ...array2, ...array3]);</div></pre></td></tr></table></figure>"},{"title":"git","url":"https://jitingsun.github.io/2016/11/01/git/","content":"<h1 id=\"git的一些简单用法\"><a href=\"#git的一些简单用法\" class=\"headerlink\" title=\"git的一些简单用法\"></a>git的一些简单用法</h1><h2 id=\"全局初始配置账号和邮箱\"><a href=\"#全局初始配置账号和邮箱\" class=\"headerlink\" title=\"全局初始配置账号和邮箱\"></a>全局初始配置账号和邮箱</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.name xxx</div><div class=\"line\">git config --global user.email xxx@xx.xx </div><div class=\"line\">git config --list 查看所有配置</div></pre></td></tr></table></figure>\n<h2 id=\"cd-命令\"><a href=\"#cd-命令\" class=\"headerlink\" title=\"cd 命令\"></a>cd 命令</h2><p>mkdir 创建目录</p>\n<h2 id=\"初始化git\"><a href=\"#初始化git\" class=\"headerlink\" title=\"初始化git\"></a>初始化git</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init</div></pre></td></tr></table></figure>\n<h2 id=\"初始化文件\"><a href=\"#初始化文件\" class=\"headerlink\" title=\"初始化文件\"></a>初始化文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo hello &gt; 1.txt</div></pre></td></tr></table></figure>\n<ul>\n<li>一个&gt;代表清空并写入 两个&gt;&gt;代表追加<h2 id=\"删除文件rm\"><a href=\"#删除文件rm\" class=\"headerlink\" title=\"删除文件rm\"></a>删除文件rm</h2><h2 id=\"查看状态\"><a href=\"#查看状态\" class=\"headerlink\" title=\"查看状态\"></a>查看状态</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git status</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"将文件加入到暂存区中\"><a href=\"#将文件加入到暂存区中\" class=\"headerlink\" title=\"将文件加入到暂存区中\"></a>将文件加入到暂存区中</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add file</div><div class=\"line\">git add . </div><div class=\"line\">git add -A</div></pre></td></tr></table></figure>\n<h2 id=\"提交commit\"><a href=\"#提交commit\" class=\"headerlink\" title=\"提交commit\"></a>提交commit</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit -m &quot;对于修改内容的描述&quot;</div></pre></td></tr></table></figure>\n<h2 id=\"vi控制台\"><a href=\"#vi控制台\" class=\"headerlink\" title=\"vi控制台\"></a>vi控制台</h2><p>如果进入了编辑模式可以通过i键进入插入模式</p>\n<ul>\n<li>i表示编辑</li>\n<li>退出esc+ :wq<h2 id=\"查看版本库信息\"><a href=\"#查看版本库信息\" class=\"headerlink\" title=\"查看版本库信息\"></a>查看版本库信息</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git log --oneline</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"比较代码差异\"><a href=\"#比较代码差异\" class=\"headerlink\" title=\"比较代码差异\"></a>比较代码差异</h2><ul>\n<li><p>比较工作区和暂存区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git diff</div></pre></td></tr></table></figure>\n</li>\n<li><p>比较工作区和版本库的区别</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git diff master</div></pre></td></tr></table></figure>\n</li>\n<li><p>比较暂存区和版本库的区别</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git diff --cached</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"从暂存区删除本次的add\"><a href=\"#从暂存区删除本次的add\" class=\"headerlink\" title=\"从暂存区删除本次的add\"></a>从暂存区删除本次的add</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reset HEAD file</div></pre></td></tr></table></figure>\n<blockquote>\n<p>取消本次的add</p>\n<h2 id=\"从缓存区-从历史区将代码覆盖掉工作区\"><a href=\"#从缓存区-从历史区将代码覆盖掉工作区\" class=\"headerlink\" title=\"从缓存区 从历史区将代码覆盖掉工作区\"></a>从缓存区 从历史区将代码覆盖掉工作区</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout file</div></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"回到过去\"><a href=\"#回到过去\" class=\"headerlink\" title=\"回到过去\"></a>回到过去</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reset --hard commit_id/^^^^^/HEAD~4</div></pre></td></tr></table></figure>\n<h2 id=\"查看未来的版本\"><a href=\"#查看未来的版本\" class=\"headerlink\" title=\"查看未来的版本\"></a>查看未来的版本</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reflog</div></pre></td></tr></table></figure>\n<h2 id=\"查看所有分支\"><a href=\"#查看所有分支\" class=\"headerlink\" title=\"查看所有分支\"></a>查看所有分支</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch</div></pre></td></tr></table></figure>\n<h2 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch xx</div></pre></td></tr></table></figure>\n<h2 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout xx</div></pre></td></tr></table></figure>\n<h2 id=\"创建并切换\"><a href=\"#创建并切换\" class=\"headerlink\" title=\"创建并切换\"></a>创建并切换</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b xx</div></pre></td></tr></table></figure>\n<h2 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch -d xx</div></pre></td></tr></table></figure>\n<h2 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git merge xx</div></pre></td></tr></table></figure>\n<h2 id=\"在gitHub上部署静态页\"><a href=\"#在gitHub上部署静态页\" class=\"headerlink\" title=\"在gitHub上部署静态页\"></a>在gitHub上部署静态页</h2><p>需要将特定的内容推送到gitHub上的gh-pages分支上</p>\n<ul>\n<li><p>创建一个gh-pages的分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b gh-pages</div></pre></td></tr></table></figure>\n</li>\n<li><p>将代码commit 到这个分支上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit -m &quot;&quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p>连接远程仓库和本地仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote add origin 地址</div></pre></td></tr></table></figure>\n</li>\n<li><p>将代码推送到远程仓库上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push origin gh-pages</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"合并分支产生冲突\"><a href=\"#合并分支产生冲突\" class=\"headerlink\" title=\"合并分支产生冲突\"></a>合并分支产生冲突</h2><ul>\n<li>在主干的某个版本上进行分支开发，在分支上开发1.txt这个文件(drag)，在主干上也开发1.txt(limit),此时回到主干上合并时，会产生冲突，需要我们手动解决<h2 id=\"从工作区中提交到历史区\"><a href=\"#从工作区中提交到历史区\" class=\"headerlink\" title=\"从工作区中提交到历史区\"></a>从工作区中提交到历史区</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit -a -m &quot;&quot;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>第一次不能这样写</p>\n<h2 id=\"解决冲突\"><a href=\"#解决冲突\" class=\"headerlink\" title=\"解决冲突\"></a>解决冲突</h2><p>去掉 &gt;&gt;&gt; ===&lt;&lt;&lt;保留需要的内容再提交</p>\n<h2 id=\"合并\"><a href=\"#合并\" class=\"headerlink\" title=\"合并\"></a>合并</h2><p>git rebase 变基<br>git cherry-pick 精选</p>\n<h2 id=\"显示结构\"><a href=\"#显示结构\" class=\"headerlink\" title=\"显示结构\"></a>显示结构</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git log --graph --oneline --decorate</div></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"创建忽略文件\"><a href=\"#创建忽略文件\" class=\"headerlink\" title=\"创建忽略文件\"></a>创建忽略文件</h2><p>将项目提交到gitHub上，需要在gitHub上创建一个空的仓库</p>\n<h2 id=\"添加远程仓库的连接\"><a href=\"#添加远程仓库的连接\" class=\"headerlink\" title=\"添加远程仓库的连接\"></a>添加远程仓库的连接</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote add 地址名字 地址</div></pre></td></tr></table></figure>\n<h2 id=\"查看配置的所有配置的地址\"><a href=\"#查看配置的所有配置的地址\" class=\"headerlink\" title=\"查看配置的所有配置的地址\"></a>查看配置的所有配置的地址</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote -v</div></pre></td></tr></table></figure>\n<h2 id=\"删除地址\"><a href=\"#删除地址\" class=\"headerlink\" title=\"删除地址\"></a>删除地址</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote rm 地址名字</div></pre></td></tr></table></figure>\n<h2 id=\"upstream\"><a href=\"#upstream\" class=\"headerlink\" title=\"upstream\"></a>upstream</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-u 下次提交或者拉取代码可以直接git push 或者git pull</div></pre></td></tr></table></figure>\n<h2 id=\"fork\"><a href=\"#fork\" class=\"headerlink\" title=\"fork\"></a>fork</h2><p>把别人的项目原封不动的拷贝一份放置到自己的仓库下，只能fork一次</p>\n"},{"title":"Hello World","url":"https://jitingsun.github.io/2016/10/31/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"category","url":"https://jitingsun.github.io/category/index.html","content":""},{"title":"link","url":"https://jitingsun.github.io/link/index.html","content":""},{"title":"search","url":"https://jitingsun.github.io/search/index.html","content":""},{"title":"project","url":"https://jitingsun.github.io/project/index.html","content":""},{"title":"about","url":"https://jitingsun.github.io/about/index.html","content":""},{"title":"tag","url":"https://jitingsun.github.io/tag/index.html","content":""},{"title":"","url":"https://jitingsun.github.io/css/personal-style.css","content":"@font-face {\n  font-family: \"Meiryo\";\n  src: url(\"/fonts/Meiryo.eot\");\n  /* IE9 */\n  src: url(\"/fonts/Meiryo.eot?#iefix\") format(\"embedded-opentype\"), /* IE6-IE8 */\n  url(\"/fonts/Meiryo.woff\") format(\"woff\"), /* chrome, firefox */\n  url(\"/fonts/Meiryo.ttf\") format(\"truetype\"), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\n  url(\"/fonts/Meiryo.svg#Meiryo\") format(\"svg\");\n  /* iOS 4.1- */\n  font-style: normal;\n  font-weight: normal;\n}\nhtml.page-home {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n/*   background-image: url('/images/bg.jpg');\nbackground-color: transparent;\nbackground-size: cover;\nbackground-position: center center;\nbackground-repeat: no-repeat; */\n\n  /*background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);*/\n  /*background-blend-mode: screen;*/\n\nbackground: linear-gradient(to left, #5f2c82, #49a09d);\n}"}]